allprojects {
    apply plugin: 'net.saliman.cobertura'
    repositories {
       mavenCentral()
         maven { url "https://repo.spring.io/snapshot" }
         maven { url "https://repo.spring.io/milestone" }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: 'net.saliman.cobertura' 
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_1_8

    repositories {
  		 mavenCentral()
         maven { url "https://repo.spring.io/snapshot" }
         maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        testImplementation 'io.projectreactor:reactor-test'
        implementation 'io.projectreactor:reactor-core'
        implementation 'io.projectreactor.addons:reactor-extra'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
    }


   cobertura {
        coverageFormats = [ 'xml', 'html' ]
    }

    test.finalizedBy(project.tasks.cobertura)
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }
}

def files = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }

cobertura {
    coverageFormats = ['xml', 'html']
    coverageSourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    coverageMergeDatafiles = files
}

test.finalizedBy(project.tasks.cobertura)

subprojects.each { project ->
    test.dependsOn(":" + project.name + ":test")
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}